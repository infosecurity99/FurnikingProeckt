{"ast":null,"code":"'use strict';\n\nconst mimicFn = require('mimic-fn');\n\nconst cacheStore = new WeakMap();\n\nconst defaultCacheKey = function (x) {\n  if (arguments.length === 1 && (x === null || x === undefined || typeof x !== 'function' && typeof x !== 'object')) {\n    return x;\n  }\n\n  return JSON.stringify(arguments);\n};\n\nmodule.exports = (fn, opts) => {\n  opts = Object.assign({\n    cacheKey: defaultCacheKey,\n    cache: new Map()\n  }, opts);\n\n  const memoized = function () {\n    const cache = cacheStore.get(memoized);\n    const key = opts.cacheKey.apply(null, arguments);\n\n    if (cache.has(key)) {\n      const c = cache.get(key);\n\n      if (typeof opts.maxAge !== 'number' || Date.now() < c.maxAge) {\n        return c.data;\n      }\n    }\n\n    const ret = fn.apply(null, arguments);\n    cache.set(key, {\n      data: ret,\n      maxAge: Date.now() + (opts.maxAge || 0)\n    });\n    return ret;\n  };\n\n  mimicFn(memoized, fn);\n  cacheStore.set(memoized, opts.cache);\n  return memoized;\n};\n\nmodule.exports.clear = fn => {\n  const cache = cacheStore.get(fn);\n\n  if (cache && typeof cache.clear === 'function') {\n    cache.clear();\n  }\n};","map":{"version":3,"sources":["C:/Users/Hp/node_modules/npx/node_modules/mem/index.js"],"names":["mimicFn","require","cacheStore","WeakMap","defaultCacheKey","x","arguments","length","undefined","JSON","stringify","module","exports","fn","opts","Object","assign","cacheKey","cache","Map","memoized","get","key","apply","has","c","maxAge","Date","now","data","ret","set","clear"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMC,UAAU,GAAG,IAAIC,OAAJ,EAAnB;;AAEA,MAAMC,eAAe,GAAG,UAAUC,CAAV,EAAa;AACpC,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAArB,KAA2BF,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKG,SAApB,IAAkC,OAAOH,CAAP,KAAa,UAAb,IAA2B,OAAOA,CAAP,KAAa,QAArG,CAAJ,EAAqH;AACpH,WAAOA,CAAP;AACA;;AAED,SAAOI,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAAP;AACA,CAND;;AAQAK,MAAM,CAACC,OAAP,GAAiB,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC9BA,EAAAA,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc;AACpBC,IAAAA,QAAQ,EAAEb,eADU;AAEpBc,IAAAA,KAAK,EAAE,IAAIC,GAAJ;AAFa,GAAd,EAGJL,IAHI,CAAP;;AAKA,QAAMM,QAAQ,GAAG,YAAY;AAC5B,UAAMF,KAAK,GAAGhB,UAAU,CAACmB,GAAX,CAAeD,QAAf,CAAd;AACA,UAAME,GAAG,GAAGR,IAAI,CAACG,QAAL,CAAcM,KAAd,CAAoB,IAApB,EAA0BjB,SAA1B,CAAZ;;AAEA,QAAIY,KAAK,CAACM,GAAN,CAAUF,GAAV,CAAJ,EAAoB;AACnB,YAAMG,CAAC,GAAGP,KAAK,CAACG,GAAN,CAAUC,GAAV,CAAV;;AAEA,UAAI,OAAOR,IAAI,CAACY,MAAZ,KAAuB,QAAvB,IAAmCC,IAAI,CAACC,GAAL,KAAaH,CAAC,CAACC,MAAtD,EAA8D;AAC7D,eAAOD,CAAC,CAACI,IAAT;AACA;AACD;;AAED,UAAMC,GAAG,GAAGjB,EAAE,CAACU,KAAH,CAAS,IAAT,EAAejB,SAAf,CAAZ;AAEAY,IAAAA,KAAK,CAACa,GAAN,CAAUT,GAAV,EAAe;AACdO,MAAAA,IAAI,EAAEC,GADQ;AAEdJ,MAAAA,MAAM,EAAEC,IAAI,CAACC,GAAL,MAAcd,IAAI,CAACY,MAAL,IAAe,CAA7B;AAFM,KAAf;AAKA,WAAOI,GAAP;AACA,GApBD;;AAsBA9B,EAAAA,OAAO,CAACoB,QAAD,EAAWP,EAAX,CAAP;AAEAX,EAAAA,UAAU,CAAC6B,GAAX,CAAeX,QAAf,EAAyBN,IAAI,CAACI,KAA9B;AAEA,SAAOE,QAAP;AACA,CAjCD;;AAmCAT,MAAM,CAACC,OAAP,CAAeoB,KAAf,GAAuBnB,EAAE,IAAI;AAC5B,QAAMK,KAAK,GAAGhB,UAAU,CAACmB,GAAX,CAAeR,EAAf,CAAd;;AAEA,MAAIK,KAAK,IAAI,OAAOA,KAAK,CAACc,KAAb,KAAuB,UAApC,EAAgD;AAC/Cd,IAAAA,KAAK,CAACc,KAAN;AACA;AACD,CAND","sourcesContent":["'use strict';\nconst mimicFn = require('mimic-fn');\n\nconst cacheStore = new WeakMap();\n\nconst defaultCacheKey = function (x) {\n\tif (arguments.length === 1 && (x === null || x === undefined || (typeof x !== 'function' && typeof x !== 'object'))) {\n\t\treturn x;\n\t}\n\n\treturn JSON.stringify(arguments);\n};\n\nmodule.exports = (fn, opts) => {\n\topts = Object.assign({\n\t\tcacheKey: defaultCacheKey,\n\t\tcache: new Map()\n\t}, opts);\n\n\tconst memoized = function () {\n\t\tconst cache = cacheStore.get(memoized);\n\t\tconst key = opts.cacheKey.apply(null, arguments);\n\n\t\tif (cache.has(key)) {\n\t\t\tconst c = cache.get(key);\n\n\t\t\tif (typeof opts.maxAge !== 'number' || Date.now() < c.maxAge) {\n\t\t\t\treturn c.data;\n\t\t\t}\n\t\t}\n\n\t\tconst ret = fn.apply(null, arguments);\n\n\t\tcache.set(key, {\n\t\t\tdata: ret,\n\t\t\tmaxAge: Date.now() + (opts.maxAge || 0)\n\t\t});\n\n\t\treturn ret;\n\t};\n\n\tmimicFn(memoized, fn);\n\n\tcacheStore.set(memoized, opts.cache);\n\n\treturn memoized;\n};\n\nmodule.exports.clear = fn => {\n\tconst cache = cacheStore.get(fn);\n\n\tif (cache && typeof cache.clear === 'function') {\n\t\tcache.clear();\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}