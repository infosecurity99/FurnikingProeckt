{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path'); // add bash completions to your\n//  yargs-powered applications.\n\n\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }; // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n\n  self.getCompletion = function (args, done) {\n    const completions = [];\n    const current = args.length ? args[args.length - 1] : '';\n    const argv = yargs.parse(args, true);\n    const aliases = yargs.parsed.aliases; // a custom completion function can be provided\n    // to completion().\n\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv); // promise based completion function.\n\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () {\n              done(list);\n            });\n          }).catch(function (err) {\n            process.nextTick(function () {\n              throw err;\n            });\n          });\n        } // synchronous completion function.\n\n\n        return done(result);\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions);\n        });\n      }\n    }\n\n    var handlers = command.getCommandHandlers();\n\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder;\n\n        if (typeof builder === 'function') {\n          const y = yargs.reset();\n          builder(y);\n          return y.argv;\n        }\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0]);\n        }\n      });\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || []);\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1;\n        });\n\n        if (notInArgs) {\n          completions.push('--' + key);\n        }\n      });\n    }\n\n    done(completions);\n  }; // generate the completion script to add to your .bashrc.\n\n\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(path.resolve(__dirname, '../completion.sh.hbs'), 'utf-8');\n    var name = path.basename($0); // add ./to applications not yet installed as bin.\n\n    if ($0.match(/\\.js$/)) $0 = './' + $0;\n    script = script.replace(/{{app_name}}/g, name);\n    return script.replace(/{{app_path}}/g, $0);\n  }; // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n\n\n  var completionFunction = null;\n\n  self.registerFunction = function (fn) {\n    completionFunction = fn;\n  };\n\n  return self;\n};","map":{"version":3,"sources":["C:/Users/Hp/node_modules/npx/node_modules/yargs/lib/completion.js"],"names":["fs","require","path","module","exports","yargs","usage","command","self","completionKey","getCompletion","args","done","completions","current","length","argv","parse","aliases","parsed","completionFunction","result","then","list","process","nextTick","catch","err","handlers","getCommandHandlers","i","ii","builder","y","reset","match","getCommands","forEach","indexOf","push","Object","keys","getOptions","key","keyAndAliases","concat","notInArgs","every","val","generateCompletionScript","$0","script","readFileSync","resolve","__dirname","name","basename","replace","registerFunction","fn"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () { done(list) })\n          }).catch(function (err) {\n            process.nextTick(function () { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = command.getCommandHandlers()\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder\n        if (typeof builder === 'function') {\n          const y = yargs.reset()\n          builder(y)\n          return y.argv\n        }\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || [])\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1\n        })\n        if (notInArgs) {\n          completions.push('--' + key)\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n"]},"metadata":{},"sourceType":"script"}