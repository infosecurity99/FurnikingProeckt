{"ast":null,"code":"'use strict';\n\nmodule.exports = npa;\nmodule.exports.resolve = resolve;\nmodule.exports.Result = Result;\nlet url;\nlet HostedGit;\nlet semver;\nlet path;\nlet validatePackageName;\nlet osenv;\nconst isWindows = process.platform === 'win32' || global.FAKE_WINDOWS;\nconst hasSlashes = isWindows ? /\\\\|[/]/ : /[/]/;\nconst isURL = /^(?:git[+])?[a-z]+:/i;\nconst isFilename = /[.](?:tgz|tar.gz|tar)$/i;\n\nfunction npa(arg, where) {\n  let name;\n  let spec;\n  const nameEndsAt = arg[0] === '@' ? arg.slice(1).indexOf('@') + 1 : arg.indexOf('@');\n  const namePart = nameEndsAt > 0 ? arg.slice(0, nameEndsAt) : arg;\n\n  if (isURL.test(arg)) {\n    spec = arg;\n  } else if (namePart[0] !== '@' && (hasSlashes.test(namePart) || isFilename.test(namePart))) {\n    spec = arg;\n  } else if (nameEndsAt > 0) {\n    name = namePart;\n    spec = arg.slice(nameEndsAt + 1);\n  } else {\n    if (!validatePackageName) validatePackageName = require('validate-npm-package-name');\n    const valid = validatePackageName(arg);\n\n    if (valid.validForOldPackages) {\n      name = arg;\n    } else {\n      spec = arg;\n    }\n  }\n\n  return resolve(name, spec, where, arg);\n}\n\nconst isFilespec = isWindows ? /^(?:[.]|~[/]|[/\\\\]|[a-zA-Z]:)/ : /^(?:[.]|~[/]|[/]|[a-zA-Z]:)/;\n\nfunction resolve(name, spec, where, arg) {\n  const res = new Result({\n    raw: arg,\n    name: name,\n    rawSpec: spec,\n    fromArgument: arg != null\n  });\n  if (name) res.setName(name);\n\n  if (spec && (isFilespec.test(spec) || /^file:/i.test(spec))) {\n    return fromFile(res, where);\n  }\n\n  if (!HostedGit) HostedGit = require('hosted-git-info');\n  const hosted = HostedGit.fromUrl(spec, {\n    noGitPlus: true,\n    noCommittish: true\n  });\n\n  if (hosted) {\n    return fromHostedGit(res, hosted);\n  } else if (spec && isURL.test(spec)) {\n    return fromURL(res);\n  } else if (spec && (hasSlashes.test(spec) || isFilename.test(spec))) {\n    return fromFile(res, where);\n  } else {\n    return fromRegistry(res);\n  }\n}\n\nfunction invalidPackageName(name, valid) {\n  const err = new Error(`Invalid package name \"${name}\": ${valid.errors.join('; ')}`);\n  err.code = 'EINVALIDPACKAGENAME';\n  return err;\n}\n\nfunction invalidTagName(name) {\n  const err = new Error(`Invalid tag name \"${name}\": Tags may not have any characters that encodeURIComponent encodes.`);\n  err.code = 'EINVALIDTAGNAME';\n  return err;\n}\n\nfunction Result(opts) {\n  this.type = opts.type;\n  this.registry = opts.registry;\n  this.where = opts.where;\n\n  if (opts.raw == null) {\n    this.raw = opts.name ? opts.name + '@' + opts.rawSpec : opts.rawSpec;\n  } else {\n    this.raw = opts.raw;\n  }\n\n  this.name = undefined;\n  this.escapedName = undefined;\n  this.scope = undefined;\n  this.rawSpec = opts.rawSpec == null ? '' : opts.rawSpec;\n  this.saveSpec = opts.saveSpec;\n  this.fetchSpec = opts.fetchSpec;\n  if (opts.name) this.setName(opts.name);\n  this.gitRange = opts.gitRange;\n  this.gitCommittish = opts.gitCommittish;\n  this.hosted = opts.hosted;\n}\n\nResult.prototype = {};\n\nResult.prototype.setName = function (name) {\n  if (!validatePackageName) validatePackageName = require('validate-npm-package-name');\n  const valid = validatePackageName(name);\n\n  if (!valid.validForOldPackages) {\n    throw invalidPackageName(name, valid);\n  }\n\n  this.name = name;\n  this.scope = name[0] === '@' ? name.slice(0, name.indexOf('/')) : undefined; // scoped packages in couch must have slash url-encoded, e.g. @foo%2Fbar\n\n  this.escapedName = name.replace('/', '%2f');\n  return this;\n};\n\nResult.prototype.toString = function () {\n  const full = [];\n  if (this.name != null && this.name !== '') full.push(this.name);\n  const spec = this.saveSpec || this.fetchSpec || this.rawSpec;\n  if (spec != null && spec !== '') full.push(spec);\n  return full.length ? full.join('@') : this.raw;\n};\n\nResult.prototype.toJSON = function () {\n  const result = Object.assign({}, this);\n  delete result.hosted;\n  return result;\n};\n\nfunction setGitCommittish(res, committish) {\n  if (committish != null && committish.length >= 7 && committish.slice(0, 7) === 'semver:') {\n    res.gitRange = decodeURIComponent(committish.slice(7));\n    res.gitCommittish = null;\n  } else if (committish == null || committish === '') {\n    res.gitCommittish = 'master';\n  } else {\n    res.gitCommittish = committish;\n  }\n\n  return res;\n}\n\nconst isAbsolutePath = /^[/]|^[A-Za-z]:/;\n\nfunction resolvePath(where, spec) {\n  if (isAbsolutePath.test(spec)) return spec;\n  if (!path) path = require('path');\n  return path.resolve(where, spec);\n}\n\nfunction isAbsolute(dir) {\n  if (dir[0] === '/') return true;\n  if (/^[A-Za-z]:/.test(dir)) return true;\n  return false;\n}\n\nfunction fromFile(res, where) {\n  if (!where) where = process.cwd();\n  res.type = isFilename.test(res.rawSpec) ? 'file' : 'directory';\n  res.where = where;\n  const spec = res.rawSpec.replace(/\\\\/g, '/').replace(/^file:[/]*([A-Za-z]:)/, '$1') // drive name paths on windows\n  .replace(/^file:(?:[/]*([~./]))?/, '$1');\n\n  if (/^~[/]/.test(spec)) {\n    // this is needed for windows and for file:~/foo/bar\n    if (!osenv) osenv = require('osenv');\n    res.fetchSpec = resolvePath(osenv.home(), spec.slice(2));\n    res.saveSpec = 'file:' + spec;\n  } else {\n    res.fetchSpec = resolvePath(where, spec);\n\n    if (isAbsolute(spec)) {\n      res.saveSpec = 'file:' + spec;\n    } else {\n      if (!path) path = require('path');\n      res.saveSpec = 'file:' + path.relative(where, res.fetchSpec);\n    }\n  }\n\n  return res;\n}\n\nfunction fromHostedGit(res, hosted) {\n  res.type = 'git';\n  res.hosted = hosted;\n  res.saveSpec = hosted.toString({\n    noGitPlus: false,\n    noCommittish: false\n  });\n  res.fetchSpec = hosted.getDefaultRepresentation() === 'shortcut' ? null : hosted.toString();\n  return setGitCommittish(res, hosted.committish);\n}\n\nfunction unsupportedURLType(protocol, spec) {\n  const err = new Error(`Unsupported URL Type \"${protocol}\": ${spec}`);\n  err.code = 'EUNSUPPORTEDPROTOCOL';\n  return err;\n}\n\nfunction fromURL(res) {\n  if (!url) url = require('url');\n  const urlparse = url.parse(res.rawSpec);\n  res.saveSpec = res.rawSpec; // check the protocol, and then see if it's git or not\n\n  switch (urlparse.protocol) {\n    case 'git:':\n    case 'git+http:':\n    case 'git+https:':\n    case 'git+rsync:':\n    case 'git+ftp:':\n    case 'git+ssh:':\n    case 'git+file:':\n      res.type = 'git';\n      setGitCommittish(res, urlparse.hash != null ? urlparse.hash.slice(1) : '');\n      urlparse.protocol = urlparse.protocol.replace(/^git[+]/, '');\n      delete urlparse.hash;\n      res.fetchSpec = url.format(urlparse);\n      break;\n\n    case 'http:':\n    case 'https:':\n      res.type = 'remote';\n      res.fetchSpec = res.saveSpec;\n      break;\n\n    default:\n      throw unsupportedURLType(urlparse.protocol, res.rawSpec);\n  }\n\n  return res;\n}\n\nfunction fromRegistry(res) {\n  res.registry = true;\n  const spec = res.rawSpec === '' ? 'latest' : res.rawSpec; // no save spec for registry components as we save based on the fetched\n  // version, not on the argument so this can't compute that.\n\n  res.saveSpec = null;\n  res.fetchSpec = spec;\n  if (!semver) semver = require('semver');\n  const version = semver.valid(spec, true);\n  const range = semver.validRange(spec, true);\n\n  if (version) {\n    res.type = 'version';\n  } else if (range) {\n    res.type = 'range';\n  } else {\n    if (encodeURIComponent(spec) !== spec) {\n      throw invalidTagName(spec);\n    }\n\n    res.type = 'tag';\n  }\n\n  return res;\n}","map":{"version":3,"sources":["C:/Users/Hp/node_modules/npx/node_modules/npm-package-arg/npa.js"],"names":["module","exports","npa","resolve","Result","url","HostedGit","semver","path","validatePackageName","osenv","isWindows","process","platform","global","FAKE_WINDOWS","hasSlashes","isURL","isFilename","arg","where","name","spec","nameEndsAt","slice","indexOf","namePart","test","require","valid","validForOldPackages","isFilespec","res","raw","rawSpec","fromArgument","setName","fromFile","hosted","fromUrl","noGitPlus","noCommittish","fromHostedGit","fromURL","fromRegistry","invalidPackageName","err","Error","errors","join","code","invalidTagName","opts","type","registry","undefined","escapedName","scope","saveSpec","fetchSpec","gitRange","gitCommittish","prototype","replace","toString","full","push","length","toJSON","result","Object","assign","setGitCommittish","committish","decodeURIComponent","isAbsolutePath","resolvePath","isAbsolute","dir","cwd","home","relative","getDefaultRepresentation","unsupportedURLType","protocol","urlparse","parse","hash","format","version","range","validRange","encodeURIComponent"],"mappings":"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","sourcesContent":["'use strict'\nmodule.exports = npa\nmodule.exports.resolve = resolve\nmodule.exports.Result = Result\n\nlet url\nlet HostedGit\nlet semver\nlet path\nlet validatePackageName\nlet osenv\n\nconst isWindows = process.platform === 'win32' || global.FAKE_WINDOWS\nconst hasSlashes = isWindows ? /\\\\|[/]/ : /[/]/\nconst isURL = /^(?:git[+])?[a-z]+:/i\nconst isFilename = /[.](?:tgz|tar.gz|tar)$/i\n\nfunction npa (arg, where) {\n  let name\n  let spec\n  const nameEndsAt = arg[0] === '@' ? arg.slice(1).indexOf('@') + 1 : arg.indexOf('@')\n  const namePart = nameEndsAt > 0 ? arg.slice(0, nameEndsAt) : arg\n  if (isURL.test(arg)) {\n    spec = arg\n  } else if (namePart[0] !== '@' && (hasSlashes.test(namePart) || isFilename.test(namePart))) {\n    spec = arg\n  } else if (nameEndsAt > 0) {\n    name = namePart\n    spec = arg.slice(nameEndsAt + 1)\n  } else {\n    if (!validatePackageName) validatePackageName = require('validate-npm-package-name')\n    const valid = validatePackageName(arg)\n    if (valid.validForOldPackages) {\n      name = arg\n    } else {\n      spec = arg\n    }\n  }\n  return resolve(name, spec, where, arg)\n}\n\nconst isFilespec = isWindows ? /^(?:[.]|~[/]|[/\\\\]|[a-zA-Z]:)/ : /^(?:[.]|~[/]|[/]|[a-zA-Z]:)/\n\nfunction resolve (name, spec, where, arg) {\n  const res = new Result({\n    raw: arg,\n    name: name,\n    rawSpec: spec,\n    fromArgument: arg != null\n  })\n\n  if (name) res.setName(name)\n\n  if (spec && (isFilespec.test(spec) || /^file:/i.test(spec))) {\n    return fromFile(res, where)\n  }\n  if (!HostedGit) HostedGit = require('hosted-git-info')\n  const hosted = HostedGit.fromUrl(spec, {noGitPlus: true, noCommittish: true})\n  if (hosted) {\n    return fromHostedGit(res, hosted)\n  } else if (spec && isURL.test(spec)) {\n    return fromURL(res)\n  } else if (spec && (hasSlashes.test(spec) || isFilename.test(spec))) {\n    return fromFile(res, where)\n  } else {\n    return fromRegistry(res)\n  }\n}\n\nfunction invalidPackageName (name, valid) {\n  const err = new Error(`Invalid package name \"${name}\": ${valid.errors.join('; ')}`)\n  err.code = 'EINVALIDPACKAGENAME'\n  return err\n}\nfunction invalidTagName (name) {\n  const err = new Error(`Invalid tag name \"${name}\": Tags may not have any characters that encodeURIComponent encodes.`)\n  err.code = 'EINVALIDTAGNAME'\n  return err\n}\n\nfunction Result (opts) {\n  this.type = opts.type\n  this.registry = opts.registry\n  this.where = opts.where\n  if (opts.raw == null) {\n    this.raw = opts.name ? opts.name + '@' + opts.rawSpec : opts.rawSpec\n  } else {\n    this.raw = opts.raw\n  }\n  this.name = undefined\n  this.escapedName = undefined\n  this.scope = undefined\n  this.rawSpec = opts.rawSpec == null ? '' : opts.rawSpec\n  this.saveSpec = opts.saveSpec\n  this.fetchSpec = opts.fetchSpec\n  if (opts.name) this.setName(opts.name)\n  this.gitRange = opts.gitRange\n  this.gitCommittish = opts.gitCommittish\n  this.hosted = opts.hosted\n}\nResult.prototype = {}\n\nResult.prototype.setName = function (name) {\n  if (!validatePackageName) validatePackageName = require('validate-npm-package-name')\n  const valid = validatePackageName(name)\n  if (!valid.validForOldPackages) {\n    throw invalidPackageName(name, valid)\n  }\n  this.name = name\n  this.scope = name[0] === '@' ? name.slice(0, name.indexOf('/')) : undefined\n  // scoped packages in couch must have slash url-encoded, e.g. @foo%2Fbar\n  this.escapedName = name.replace('/', '%2f')\n  return this\n}\n\nResult.prototype.toString = function () {\n  const full = []\n  if (this.name != null && this.name !== '') full.push(this.name)\n  const spec = this.saveSpec || this.fetchSpec || this.rawSpec\n  if (spec != null && spec !== '') full.push(spec)\n  return full.length ? full.join('@') : this.raw\n}\n\nResult.prototype.toJSON = function () {\n  const result = Object.assign({}, this)\n  delete result.hosted\n  return result\n}\n\nfunction setGitCommittish (res, committish) {\n  if (committish != null && committish.length >= 7 && committish.slice(0, 7) === 'semver:') {\n    res.gitRange = decodeURIComponent(committish.slice(7))\n    res.gitCommittish = null\n  } else if (committish == null || committish === '') {\n    res.gitCommittish = 'master'\n  } else {\n    res.gitCommittish = committish\n  }\n  return res\n}\n\nconst isAbsolutePath = /^[/]|^[A-Za-z]:/\n\nfunction resolvePath (where, spec) {\n  if (isAbsolutePath.test(spec)) return spec\n  if (!path) path = require('path')\n  return path.resolve(where, spec)\n}\n\nfunction isAbsolute (dir) {\n  if (dir[0] === '/') return true\n  if (/^[A-Za-z]:/.test(dir)) return true\n  return false\n}\n\nfunction fromFile (res, where) {\n  if (!where) where = process.cwd()\n  res.type = isFilename.test(res.rawSpec) ? 'file' : 'directory'\n  res.where = where\n\n  const spec = res.rawSpec.replace(/\\\\/g, '/')\n    .replace(/^file:[/]*([A-Za-z]:)/, '$1') // drive name paths on windows\n    .replace(/^file:(?:[/]*([~./]))?/, '$1')\n  if (/^~[/]/.test(spec)) {\n    // this is needed for windows and for file:~/foo/bar\n    if (!osenv) osenv = require('osenv')\n    res.fetchSpec = resolvePath(osenv.home(), spec.slice(2))\n    res.saveSpec = 'file:' + spec\n  } else {\n    res.fetchSpec = resolvePath(where, spec)\n    if (isAbsolute(spec)) {\n      res.saveSpec = 'file:' + spec\n    } else {\n      if (!path) path = require('path')\n      res.saveSpec = 'file:' + path.relative(where, res.fetchSpec)\n    }\n  }\n  return res\n}\n\nfunction fromHostedGit (res, hosted) {\n  res.type = 'git'\n  res.hosted = hosted\n  res.saveSpec = hosted.toString({noGitPlus: false, noCommittish: false})\n  res.fetchSpec = hosted.getDefaultRepresentation() === 'shortcut' ? null : hosted.toString()\n  return setGitCommittish(res, hosted.committish)\n}\n\nfunction unsupportedURLType (protocol, spec) {\n  const err = new Error(`Unsupported URL Type \"${protocol}\": ${spec}`)\n  err.code = 'EUNSUPPORTEDPROTOCOL'\n  return err\n}\n\nfunction fromURL (res) {\n  if (!url) url = require('url')\n  const urlparse = url.parse(res.rawSpec)\n  res.saveSpec = res.rawSpec\n  // check the protocol, and then see if it's git or not\n  switch (urlparse.protocol) {\n    case 'git:':\n    case 'git+http:':\n    case 'git+https:':\n    case 'git+rsync:':\n    case 'git+ftp:':\n    case 'git+ssh:':\n    case 'git+file:':\n      res.type = 'git'\n      setGitCommittish(res, urlparse.hash != null ? urlparse.hash.slice(1) : '')\n      urlparse.protocol = urlparse.protocol.replace(/^git[+]/, '')\n      delete urlparse.hash\n      res.fetchSpec = url.format(urlparse)\n      break\n\n    case 'http:':\n    case 'https:':\n      res.type = 'remote'\n      res.fetchSpec = res.saveSpec\n      break\n\n    default:\n      throw unsupportedURLType(urlparse.protocol, res.rawSpec)\n  }\n\n  return res\n}\n\nfunction fromRegistry (res) {\n  res.registry = true\n  const spec = res.rawSpec === '' ? 'latest' : res.rawSpec\n  // no save spec for registry components as we save based on the fetched\n  // version, not on the argument so this can't compute that.\n  res.saveSpec = null\n  res.fetchSpec = spec\n  if (!semver) semver = require('semver')\n  const version = semver.valid(spec, true)\n  const range = semver.validRange(spec, true)\n  if (version) {\n    res.type = 'version'\n  } else if (range) {\n    res.type = 'range'\n  } else {\n    if (encodeURIComponent(spec) !== spec) {\n      throw invalidTagName(spec)\n    }\n    res.type = 'tag'\n  }\n  return res\n}\n"]},"metadata":{},"sourceType":"script"}