{"ast":null,"code":"'use strict';\n\nconst execa = require('execa');\n\nconst lcid = require('lcid');\n\nconst mem = require('mem');\n\nconst defaultOpts = {\n  spawn: true\n};\nconst defaultLocale = 'en_US';\n\nfunction getEnvLocale(env) {\n  env = env || process.env;\n  return env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n}\n\nfunction parseLocale(x) {\n  const env = x.split('\\n').reduce((env, def) => {\n    def = def.split('=');\n    env[def[0]] = def[1].replace(/^\"|\"$/g, '');\n    return env;\n  }, {});\n  return getEnvLocale(env);\n}\n\nfunction getLocale(str) {\n  return str && str.replace(/[.:].*/, '');\n}\n\nfunction getAppleLocale() {\n  return execa.stdout('defaults', ['read', '-g', 'AppleLocale']);\n}\n\nfunction getAppleLocaleSync() {\n  return execa.sync('defaults', ['read', '-g', 'AppleLocale']).stdout;\n}\n\nfunction getUnixLocale() {\n  if (process.platform === 'darwin') {\n    return getAppleLocale();\n  }\n\n  return execa.stdout('locale').then(stdout => getLocale(parseLocale(stdout)));\n}\n\nfunction getUnixLocaleSync() {\n  if (process.platform === 'darwin') {\n    return getAppleLocaleSync();\n  }\n\n  return getLocale(parseLocale(execa.sync('locale').stdout));\n}\n\nfunction getWinLocale() {\n  return execa.stdout('wmic', ['os', 'get', 'locale']).then(stdout => {\n    const lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n    return lcid.from(lcidCode);\n  });\n}\n\nfunction getWinLocaleSync() {\n  const stdout = execa.sync('wmic', ['os', 'get', 'locale']).stdout;\n  const lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n  return lcid.from(lcidCode);\n}\n\nmodule.exports = mem(opts => {\n  opts = opts || defaultOpts;\n  const envLocale = getEnvLocale();\n  let thenable;\n\n  if (envLocale || opts.spawn === false) {\n    thenable = Promise.resolve(getLocale(envLocale));\n  } else if (process.platform === 'win32') {\n    thenable = getWinLocale();\n  } else {\n    thenable = getUnixLocale();\n  }\n\n  return thenable.then(locale => locale || defaultLocale).catch(() => defaultLocale);\n});\nmodule.exports.sync = mem(opts => {\n  opts = opts || defaultOpts;\n  const envLocale = getEnvLocale();\n  let res;\n\n  if (envLocale || opts.spawn === false) {\n    res = getLocale(envLocale);\n  } else {\n    try {\n      if (process.platform === 'win32') {\n        res = getWinLocaleSync();\n      } else {\n        res = getUnixLocaleSync();\n      }\n    } catch (err) {}\n  }\n\n  return res || defaultLocale;\n});","map":{"version":3,"sources":["C:/Users/Hp/node_modules/npx/node_modules/os-locale/index.js"],"names":["execa","require","lcid","mem","defaultOpts","spawn","defaultLocale","getEnvLocale","env","process","LC_ALL","LC_MESSAGES","LANG","LANGUAGE","parseLocale","x","split","reduce","def","replace","getLocale","str","getAppleLocale","stdout","getAppleLocaleSync","sync","getUnixLocale","platform","then","getUnixLocaleSync","getWinLocale","lcidCode","parseInt","from","getWinLocaleSync","module","exports","opts","envLocale","thenable","Promise","resolve","locale","catch","res","err"],"mappings":"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","sourcesContent":["'use strict';\nconst execa = require('execa');\nconst lcid = require('lcid');\nconst mem = require('mem');\n\nconst defaultOpts = {spawn: true};\nconst defaultLocale = 'en_US';\n\nfunction getEnvLocale(env) {\n\tenv = env || process.env;\n\treturn env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n}\n\nfunction parseLocale(x) {\n\tconst env = x.split('\\n').reduce((env, def) => {\n\t\tdef = def.split('=');\n\t\tenv[def[0]] = def[1].replace(/^\"|\"$/g, '');\n\t\treturn env;\n\t}, {});\n\treturn getEnvLocale(env);\n}\n\nfunction getLocale(str) {\n\treturn (str && str.replace(/[.:].*/, ''));\n}\n\nfunction getAppleLocale() {\n\treturn execa.stdout('defaults', ['read', '-g', 'AppleLocale']);\n}\n\nfunction getAppleLocaleSync() {\n\treturn execa.sync('defaults', ['read', '-g', 'AppleLocale']).stdout;\n}\n\nfunction getUnixLocale() {\n\tif (process.platform === 'darwin') {\n\t\treturn getAppleLocale();\n\t}\n\n\treturn execa.stdout('locale')\n\t\t.then(stdout => getLocale(parseLocale(stdout)));\n}\n\nfunction getUnixLocaleSync() {\n\tif (process.platform === 'darwin') {\n\t\treturn getAppleLocaleSync();\n\t}\n\n\treturn getLocale(parseLocale(execa.sync('locale').stdout));\n}\n\nfunction getWinLocale() {\n\treturn execa.stdout('wmic', ['os', 'get', 'locale'])\n\t\t.then(stdout => {\n\t\t\tconst lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n\t\t\treturn lcid.from(lcidCode);\n\t\t});\n}\n\nfunction getWinLocaleSync() {\n\tconst stdout = execa.sync('wmic', ['os', 'get', 'locale']).stdout;\n\tconst lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n\treturn lcid.from(lcidCode);\n}\n\nmodule.exports = mem(opts => {\n\topts = opts || defaultOpts;\n\tconst envLocale = getEnvLocale();\n\tlet thenable;\n\n\tif (envLocale || opts.spawn === false) {\n\t\tthenable = Promise.resolve(getLocale(envLocale));\n\t} else if (process.platform === 'win32') {\n\t\tthenable = getWinLocale();\n\t} else {\n\t\tthenable = getUnixLocale();\n\t}\n\n\treturn thenable.then(locale => locale || defaultLocale)\n\t\t.catch(() => defaultLocale);\n});\n\nmodule.exports.sync = mem(opts => {\n\topts = opts || defaultOpts;\n\tconst envLocale = getEnvLocale();\n\tlet res;\n\n\tif (envLocale || opts.spawn === false) {\n\t\tres = getLocale(envLocale);\n\t} else {\n\t\ttry {\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tres = getWinLocaleSync();\n\t\t\t} else {\n\t\t\t\tres = getUnixLocaleSync();\n\t\t\t}\n\t\t} catch (err) {}\n\t}\n\n\treturn res || defaultLocale;\n});\n"]},"metadata":{},"sourceType":"script"}