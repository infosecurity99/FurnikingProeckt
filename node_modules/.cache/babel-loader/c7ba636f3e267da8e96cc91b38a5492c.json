{"ast":null,"code":"'use strict';\n\nconst childProcess = require('child_process');\n\nconst util = require('util');\n\nconst crossSpawn = require('cross-spawn');\n\nconst stripEof = require('strip-eof');\n\nconst npmRunPath = require('npm-run-path');\n\nconst isStream = require('is-stream');\n\nconst _getStream = require('get-stream');\n\nconst pFinally = require('p-finally');\n\nconst onExit = require('signal-exit');\n\nconst errname = require('./lib/errname');\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\n\nfunction handleArgs(cmd, args, opts) {\n  let parsed;\n\n  if (opts && opts.__winShell === true) {\n    delete opts.__winShell;\n    parsed = {\n      command: cmd,\n      args,\n      options: opts,\n      file: cmd,\n      original: cmd\n    };\n  } else {\n    parsed = crossSpawn._parse(cmd, args, opts);\n  }\n\n  opts = Object.assign({\n    maxBuffer: TEN_MEGABYTES,\n    stripEof: true,\n    preferLocal: true,\n    encoding: 'utf8',\n    reject: true,\n    cleanup: true\n  }, parsed.options);\n\n  if (opts.preferLocal) {\n    opts.env = npmRunPath.env(opts);\n  }\n\n  return {\n    cmd: parsed.command,\n    args: parsed.args,\n    opts\n  };\n}\n\nfunction handleInput(spawned, opts) {\n  const input = opts.input;\n\n  if (input === null || input === undefined) {\n    return;\n  }\n\n  if (isStream(input)) {\n    input.pipe(spawned.stdin);\n  } else {\n    spawned.stdin.end(input);\n  }\n}\n\nfunction handleOutput(opts, val) {\n  if (val && opts.stripEof) {\n    val = stripEof(val);\n  }\n\n  return val;\n}\n\nfunction handleShell(fn, cmd, opts) {\n  let file = '/bin/sh';\n  let args = ['-c', cmd];\n  opts = Object.assign({}, opts);\n\n  if (process.platform === 'win32') {\n    opts.__winShell = true;\n    file = process.env.comspec || 'cmd.exe';\n    args = ['/s', '/c', `\"${cmd}\"`];\n    opts.windowsVerbatimArguments = true;\n  }\n\n  if (opts.shell) {\n    file = opts.shell;\n    delete opts.shell;\n  }\n\n  return fn(file, args, opts);\n}\n\nfunction getStream(process, stream, encoding, maxBuffer) {\n  if (!process[stream]) {\n    return null;\n  }\n\n  let ret;\n\n  if (encoding) {\n    ret = _getStream(process[stream], {\n      encoding,\n      maxBuffer\n    });\n  } else {\n    ret = _getStream.buffer(process[stream], {\n      maxBuffer\n    });\n  }\n\n  return ret.catch(err => {\n    err.stream = stream;\n    err.message = `${stream} ${err.message}`;\n    throw err;\n  });\n}\n\nmodule.exports = (cmd, args, opts) => {\n  let joinedCmd = cmd;\n\n  if (Array.isArray(args) && args.length > 0) {\n    joinedCmd += ' ' + args.join(' ');\n  }\n\n  const parsed = handleArgs(cmd, args, opts);\n  const encoding = parsed.opts.encoding;\n  const maxBuffer = parsed.opts.maxBuffer;\n  let spawned;\n\n  try {\n    spawned = childProcess.spawn(parsed.cmd, parsed.args, parsed.opts);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n\n  let removeExitHandler;\n\n  if (parsed.opts.cleanup) {\n    removeExitHandler = onExit(() => {\n      spawned.kill();\n    });\n  }\n\n  let timeoutId = null;\n  let timedOut = false;\n\n  const cleanupTimeout = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n  };\n\n  if (parsed.opts.timeout > 0) {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      timedOut = true;\n      spawned.kill(parsed.killSignal);\n    }, parsed.opts.timeout);\n  }\n\n  const processDone = new Promise(resolve => {\n    spawned.on('exit', (code, signal) => {\n      cleanupTimeout();\n      resolve({\n        code,\n        signal\n      });\n    });\n    spawned.on('error', err => {\n      cleanupTimeout();\n      resolve({\n        err\n      });\n    });\n  });\n\n  function destroy() {\n    if (spawned.stdout) {\n      spawned.stdout.destroy();\n    }\n\n    if (spawned.stderr) {\n      spawned.stderr.destroy();\n    }\n  }\n\n  const promise = pFinally(Promise.all([processDone, getStream(spawned, 'stdout', encoding, maxBuffer), getStream(spawned, 'stderr', encoding, maxBuffer)]).then(arr => {\n    const result = arr[0];\n    const stdout = arr[1];\n    const stderr = arr[2];\n    let err = result.err;\n    const code = result.code;\n    const signal = result.signal;\n\n    if (removeExitHandler) {\n      removeExitHandler();\n    }\n\n    if (err || code !== 0 || signal !== null) {\n      if (!err) {\n        err = new Error(`Command failed: ${joinedCmd}\\n${stderr}${stdout}`);\n        err.code = code < 0 ? errname(code) : code;\n      } // TODO: missing some timeout logic for killed\n      // https://github.com/nodejs/node/blob/master/lib/child_process.js#L203\n      // err.killed = spawned.killed || killed;\n\n\n      err.killed = err.killed || spawned.killed;\n      err.stdout = stdout;\n      err.stderr = stderr;\n      err.failed = true;\n      err.signal = signal || null;\n      err.cmd = joinedCmd;\n      err.timedOut = timedOut;\n\n      if (!parsed.opts.reject) {\n        return err;\n      }\n\n      throw err;\n    }\n\n    return {\n      stdout: handleOutput(parsed.opts, stdout),\n      stderr: handleOutput(parsed.opts, stderr),\n      code: 0,\n      failed: false,\n      killed: false,\n      signal: null,\n      cmd: joinedCmd,\n      timedOut: false\n    };\n  }), destroy);\n\n  crossSpawn._enoent.hookChildProcess(spawned, parsed);\n\n  handleInput(spawned, parsed.opts);\n  spawned.then = promise.then.bind(promise);\n  spawned.catch = promise.catch.bind(promise);\n  return spawned;\n};\n\nmodule.exports.stdout = function () {\n  // TODO: set `stderr: 'ignore'` when that option is implemented\n  return module.exports.apply(null, arguments).then(x => x.stdout);\n};\n\nmodule.exports.stderr = function () {\n  // TODO: set `stdout: 'ignore'` when that option is implemented\n  return module.exports.apply(null, arguments).then(x => x.stderr);\n};\n\nmodule.exports.shell = (cmd, opts) => handleShell(module.exports, cmd, opts);\n\nmodule.exports.sync = (cmd, args, opts) => {\n  const parsed = handleArgs(cmd, args, opts);\n\n  if (isStream(parsed.opts.input)) {\n    throw new TypeError('The `input` option cannot be a stream in sync mode');\n  }\n\n  const result = childProcess.spawnSync(parsed.cmd, parsed.args, parsed.opts);\n  result.stdout = handleOutput(parsed.opts, result.stdout);\n  result.stderr = handleOutput(parsed.opts, result.stderr);\n  return result;\n};\n\nmodule.exports.shellSync = (cmd, opts) => handleShell(module.exports.sync, cmd, opts);\n\nmodule.exports.spawn = util.deprecate(module.exports, 'execa.spawn() is deprecated. Use execa() instead.');","map":{"version":3,"sources":["C:/Users/Hp/node_modules/npx/node_modules/execa/index.js"],"names":["childProcess","require","util","crossSpawn","stripEof","npmRunPath","isStream","_getStream","pFinally","onExit","errname","TEN_MEGABYTES","handleArgs","cmd","args","opts","parsed","__winShell","command","options","file","original","_parse","Object","assign","maxBuffer","preferLocal","encoding","reject","cleanup","env","handleInput","spawned","input","undefined","pipe","stdin","end","handleOutput","val","handleShell","fn","process","platform","comspec","windowsVerbatimArguments","shell","getStream","stream","ret","buffer","catch","err","message","module","exports","joinedCmd","Array","isArray","length","join","spawn","Promise","removeExitHandler","kill","timeoutId","timedOut","cleanupTimeout","clearTimeout","timeout","setTimeout","killSignal","processDone","resolve","on","code","signal","destroy","stdout","stderr","promise","all","then","arr","result","Error","killed","failed","_enoent","hookChildProcess","bind","apply","arguments","x","sync","TypeError","spawnSync","shellSync","deprecate"],"mappings":"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","sourcesContent":["'use strict';\nconst childProcess = require('child_process');\nconst util = require('util');\nconst crossSpawn = require('cross-spawn');\nconst stripEof = require('strip-eof');\nconst npmRunPath = require('npm-run-path');\nconst isStream = require('is-stream');\nconst _getStream = require('get-stream');\nconst pFinally = require('p-finally');\nconst onExit = require('signal-exit');\nconst errname = require('./lib/errname');\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\n\nfunction handleArgs(cmd, args, opts) {\n\tlet parsed;\n\n\tif (opts && opts.__winShell === true) {\n\t\tdelete opts.__winShell;\n\t\tparsed = {\n\t\t\tcommand: cmd,\n\t\t\targs,\n\t\t\toptions: opts,\n\t\t\tfile: cmd,\n\t\t\toriginal: cmd\n\t\t};\n\t} else {\n\t\tparsed = crossSpawn._parse(cmd, args, opts);\n\t}\n\n\topts = Object.assign({\n\t\tmaxBuffer: TEN_MEGABYTES,\n\t\tstripEof: true,\n\t\tpreferLocal: true,\n\t\tencoding: 'utf8',\n\t\treject: true,\n\t\tcleanup: true\n\t}, parsed.options);\n\n\tif (opts.preferLocal) {\n\t\topts.env = npmRunPath.env(opts);\n\t}\n\n\treturn {\n\t\tcmd: parsed.command,\n\t\targs: parsed.args,\n\t\topts\n\t};\n}\n\nfunction handleInput(spawned, opts) {\n\tconst input = opts.input;\n\n\tif (input === null || input === undefined) {\n\t\treturn;\n\t}\n\n\tif (isStream(input)) {\n\t\tinput.pipe(spawned.stdin);\n\t} else {\n\t\tspawned.stdin.end(input);\n\t}\n}\n\nfunction handleOutput(opts, val) {\n\tif (val && opts.stripEof) {\n\t\tval = stripEof(val);\n\t}\n\n\treturn val;\n}\n\nfunction handleShell(fn, cmd, opts) {\n\tlet file = '/bin/sh';\n\tlet args = ['-c', cmd];\n\n\topts = Object.assign({}, opts);\n\n\tif (process.platform === 'win32') {\n\t\topts.__winShell = true;\n\t\tfile = process.env.comspec || 'cmd.exe';\n\t\targs = ['/s', '/c', `\"${cmd}\"`];\n\t\topts.windowsVerbatimArguments = true;\n\t}\n\n\tif (opts.shell) {\n\t\tfile = opts.shell;\n\t\tdelete opts.shell;\n\t}\n\n\treturn fn(file, args, opts);\n}\n\nfunction getStream(process, stream, encoding, maxBuffer) {\n\tif (!process[stream]) {\n\t\treturn null;\n\t}\n\n\tlet ret;\n\n\tif (encoding) {\n\t\tret = _getStream(process[stream], {\n\t\t\tencoding,\n\t\t\tmaxBuffer\n\t\t});\n\t} else {\n\t\tret = _getStream.buffer(process[stream], {maxBuffer});\n\t}\n\n\treturn ret.catch(err => {\n\t\terr.stream = stream;\n\t\terr.message = `${stream} ${err.message}`;\n\t\tthrow err;\n\t});\n}\n\nmodule.exports = (cmd, args, opts) => {\n\tlet joinedCmd = cmd;\n\n\tif (Array.isArray(args) && args.length > 0) {\n\t\tjoinedCmd += ' ' + args.join(' ');\n\t}\n\n\tconst parsed = handleArgs(cmd, args, opts);\n\tconst encoding = parsed.opts.encoding;\n\tconst maxBuffer = parsed.opts.maxBuffer;\n\n\tlet spawned;\n\ttry {\n\t\tspawned = childProcess.spawn(parsed.cmd, parsed.args, parsed.opts);\n\t} catch (err) {\n\t\treturn Promise.reject(err);\n\t}\n\n\tlet removeExitHandler;\n\tif (parsed.opts.cleanup) {\n\t\tremoveExitHandler = onExit(() => {\n\t\t\tspawned.kill();\n\t\t});\n\t}\n\n\tlet timeoutId = null;\n\tlet timedOut = false;\n\n\tconst cleanupTimeout = () => {\n\t\tif (timeoutId) {\n\t\t\tclearTimeout(timeoutId);\n\t\t\ttimeoutId = null;\n\t\t}\n\t};\n\n\tif (parsed.opts.timeout > 0) {\n\t\ttimeoutId = setTimeout(() => {\n\t\t\ttimeoutId = null;\n\t\t\ttimedOut = true;\n\t\t\tspawned.kill(parsed.killSignal);\n\t\t}, parsed.opts.timeout);\n\t}\n\n\tconst processDone = new Promise(resolve => {\n\t\tspawned.on('exit', (code, signal) => {\n\t\t\tcleanupTimeout();\n\t\t\tresolve({code, signal});\n\t\t});\n\n\t\tspawned.on('error', err => {\n\t\t\tcleanupTimeout();\n\t\t\tresolve({err});\n\t\t});\n\t});\n\n\tfunction destroy() {\n\t\tif (spawned.stdout) {\n\t\t\tspawned.stdout.destroy();\n\t\t}\n\n\t\tif (spawned.stderr) {\n\t\t\tspawned.stderr.destroy();\n\t\t}\n\t}\n\n\tconst promise = pFinally(Promise.all([\n\t\tprocessDone,\n\t\tgetStream(spawned, 'stdout', encoding, maxBuffer),\n\t\tgetStream(spawned, 'stderr', encoding, maxBuffer)\n\t]).then(arr => {\n\t\tconst result = arr[0];\n\t\tconst stdout = arr[1];\n\t\tconst stderr = arr[2];\n\n\t\tlet err = result.err;\n\t\tconst code = result.code;\n\t\tconst signal = result.signal;\n\n\t\tif (removeExitHandler) {\n\t\t\tremoveExitHandler();\n\t\t}\n\n\t\tif (err || code !== 0 || signal !== null) {\n\t\t\tif (!err) {\n\t\t\t\terr = new Error(`Command failed: ${joinedCmd}\\n${stderr}${stdout}`);\n\t\t\t\terr.code = code < 0 ? errname(code) : code;\n\t\t\t}\n\n\t\t\t// TODO: missing some timeout logic for killed\n\t\t\t// https://github.com/nodejs/node/blob/master/lib/child_process.js#L203\n\t\t\t// err.killed = spawned.killed || killed;\n\t\t\terr.killed = err.killed || spawned.killed;\n\n\t\t\terr.stdout = stdout;\n\t\t\terr.stderr = stderr;\n\t\t\terr.failed = true;\n\t\t\terr.signal = signal || null;\n\t\t\terr.cmd = joinedCmd;\n\t\t\terr.timedOut = timedOut;\n\n\t\t\tif (!parsed.opts.reject) {\n\t\t\t\treturn err;\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t}\n\n\t\treturn {\n\t\t\tstdout: handleOutput(parsed.opts, stdout),\n\t\t\tstderr: handleOutput(parsed.opts, stderr),\n\t\t\tcode: 0,\n\t\t\tfailed: false,\n\t\t\tkilled: false,\n\t\t\tsignal: null,\n\t\t\tcmd: joinedCmd,\n\t\t\ttimedOut: false\n\t\t};\n\t}), destroy);\n\n\tcrossSpawn._enoent.hookChildProcess(spawned, parsed);\n\n\thandleInput(spawned, parsed.opts);\n\n\tspawned.then = promise.then.bind(promise);\n\tspawned.catch = promise.catch.bind(promise);\n\n\treturn spawned;\n};\n\nmodule.exports.stdout = function () {\n\t// TODO: set `stderr: 'ignore'` when that option is implemented\n\treturn module.exports.apply(null, arguments).then(x => x.stdout);\n};\n\nmodule.exports.stderr = function () {\n\t// TODO: set `stdout: 'ignore'` when that option is implemented\n\treturn module.exports.apply(null, arguments).then(x => x.stderr);\n};\n\nmodule.exports.shell = (cmd, opts) => handleShell(module.exports, cmd, opts);\n\nmodule.exports.sync = (cmd, args, opts) => {\n\tconst parsed = handleArgs(cmd, args, opts);\n\n\tif (isStream(parsed.opts.input)) {\n\t\tthrow new TypeError('The `input` option cannot be a stream in sync mode');\n\t}\n\n\tconst result = childProcess.spawnSync(parsed.cmd, parsed.args, parsed.opts);\n\n\tresult.stdout = handleOutput(parsed.opts, result.stdout);\n\tresult.stderr = handleOutput(parsed.opts, result.stderr);\n\n\treturn result;\n};\n\nmodule.exports.shellSync = (cmd, opts) => handleShell(module.exports.sync, cmd, opts);\n\nmodule.exports.spawn = util.deprecate(module.exports, 'execa.spawn() is deprecated. Use execa() instead.');\n"]},"metadata":{},"sourceType":"script"}